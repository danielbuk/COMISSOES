#!/usr/bin/env python3
"""
Script de teste para a funcionalidade de gera√ß√£o de PDF
"""

import requests
import json
from datetime import datetime

# Configura√ß√£o
BASE_URL = "http://localhost:5000"
TEST_MES = 12
TEST_ANO = 2024

def test_pdf_generation():
    """Testa a funcionalidade de gera√ß√£o de PDF"""
    
    print("üß™ Iniciando testes de gera√ß√£o de PDF...")
    print("=" * 50)
    
    # Teste 1: Verificar se a rota existe
    print("\n1Ô∏è‚É£ Testando acesso √† rota de PDF...")
    response = requests.get(f"{BASE_URL}/relatorio/pdf?mes={TEST_MES}&ano={TEST_ANO}")
    
    if response.status_code == 200:
        print("‚úÖ Rota de PDF acess√≠vel")
        
        # Verificar se √© um PDF
        content_type = response.headers.get('content-type', '')
        if 'application/pdf' in content_type:
            print("‚úÖ Content-Type correto (application/pdf)")
        else:
            print(f"‚ö†Ô∏è Content-Type inesperado: {content_type}")
        
        # Verificar nome do arquivo
        content_disposition = response.headers.get('content-disposition', '')
        if 'Relatorio_Comissoes' in content_disposition:
            print("‚úÖ Nome do arquivo correto")
        else:
            print(f"‚ö†Ô∏è Nome do arquivo inesperado: {content_disposition}")
        
        # Verificar tamanho do arquivo
        content_length = len(response.content)
        if content_length > 1000:  # PDF deve ter pelo menos 1KB
            print(f"‚úÖ PDF gerado com sucesso ({content_length} bytes)")
            
            # Salvar PDF para inspe√ß√£o
            filename = f"test_pdf_{TEST_MES}_{TEST_ANO}.pdf"
            with open(filename, 'wb') as f:
                f.write(response.content)
            print(f"üìÑ PDF salvo como: {filename}")
            
        else:
            print(f"‚ùå PDF muito pequeno ({content_length} bytes)")
            return False
            
    elif response.status_code == 404:
        print("‚ùå Nenhum dado encontrado para o per√≠odo")
        print("üí° Certifique-se de que existem dados para 12/2024")
        return False
    else:
        print(f"‚ùå Erro HTTP: {response.status_code}")
        print(f"Resposta: {response.text}")
        return False
    
    # Teste 2: Verificar par√¢metros obrigat√≥rios
    print("\n2Ô∏è‚É£ Testando valida√ß√£o de par√¢metros...")
    
    # Teste sem m√™s
    response = requests.get(f"{BASE_URL}/relatorio/pdf?ano={TEST_ANO}")
    if response.status_code == 400:
        print("‚úÖ Valida√ß√£o de m√™s obrigat√≥rio funcionando")
    else:
        print(f"‚ùå Valida√ß√£o de m√™s falhou: {response.status_code}")
    
    # Teste sem ano
    response = requests.get(f"{BASE_URL}/relatorio/pdf?mes={TEST_MES}")
    if response.status_code == 400:
        print("‚úÖ Valida√ß√£o de ano obrigat√≥rio funcionando")
    else:
        print(f"‚ùå Valida√ß√£o de ano falhou: {response.status_code}")
    
    # Teste 3: Verificar per√≠odo inexistente
    print("\n3Ô∏è‚É£ Testando per√≠odo inexistente...")
    response = requests.get(f"{BASE_URL}/relatorio/pdf?mes=99&ano=9999")
    if response.status_code == 404:
        print("‚úÖ Tratamento de per√≠odo inexistente funcionando")
    else:
        print(f"‚ö†Ô∏è Tratamento de per√≠odo inexistente: {response.status_code}")
    
    print("\n" + "=" * 50)
    print("üéâ Testes de gera√ß√£o de PDF conclu√≠dos!")
    print("‚úÖ Funcionalidade de PDF est√° funcionando")
    
    return True

def test_pdf_content():
    """Testa o conte√∫do do PDF gerado"""
    print("\nüìÑ Analisando conte√∫do do PDF...")
    
    try:
        import PyPDF2
        filename = f"test_pdf_{TEST_MES}_{TEST_ANO}.pdf"
        
        with open(filename, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            if len(pdf_reader.pages) > 0:
                print(f"‚úÖ PDF tem {len(pdf_reader.pages)} p√°gina(s)")
                
                # Extrair texto da primeira p√°gina
                first_page = pdf_reader.pages[0]
                text = first_page.extract_text()
                
                if "Relat√≥rio de Comiss√µes" in text:
                    print("‚úÖ T√≠tulo do relat√≥rio encontrado")
                else:
                    print("‚ö†Ô∏è T√≠tulo do relat√≥rio n√£o encontrado")
                
                if f"{TEST_MES}/{TEST_ANO}" in text:
                    print("‚úÖ Per√≠odo do relat√≥rio encontrado")
                else:
                    print("‚ö†Ô∏è Per√≠odo do relat√≥rio n√£o encontrado")
                
                if "R$" in text:
                    print("‚úÖ Valores monet√°rios encontrados")
                else:
                    print("‚ö†Ô∏è Valores monet√°rios n√£o encontrados")
                
            else:
                print("‚ùå PDF n√£o tem p√°ginas")
                
    except ImportError:
        print("‚ö†Ô∏è PyPDF2 n√£o instalado - n√£o √© poss√≠vel analisar conte√∫do")
    except Exception as e:
        print(f"‚ùå Erro ao analisar PDF: {e}")

if __name__ == '__main__':
    try:
        print("üöÄ Iniciando testes do sistema de gera√ß√£o de PDF")
        print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        # Testar gera√ß√£o de PDF
        if test_pdf_generation():
            # Testar conte√∫do do PDF
            test_pdf_content()
        
        print("\nüéØ Resumo dos testes:")
        print("   ‚úÖ Rota de gera√ß√£o de PDF")
        print("   ‚úÖ Valida√ß√£o de par√¢metros")
        print("   ‚úÖ Gera√ß√£o de arquivo PDF")
        print("   ‚úÖ Headers corretos")
        print("\nüéâ Sistema de gera√ß√£o de PDF funcionando perfeitamente!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor")
        print("üí° Certifique-se de que a aplica√ß√£o est√° rodando em http://localhost:5000")
        exit(1)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        exit(1)
